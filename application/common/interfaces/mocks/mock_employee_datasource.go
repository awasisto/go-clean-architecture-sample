// Code generated by MockGen. DO NOT EDIT.
// Source: employee_datasource.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	"go-clean-architecture-sample/domain/entities"
	reflect "reflect"
)

// MockEmployeeDataSource is a mock of EmployeeDataSource interface
type MockEmployeeDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeDataSourceMockRecorder
}

// MockEmployeeDataSourceMockRecorder is the mock recorder for MockEmployeeDataSource
type MockEmployeeDataSourceMockRecorder struct {
	mock *MockEmployeeDataSource
}

// NewMockEmployeeDataSource creates a new mock instance
func NewMockEmployeeDataSource(ctrl *gomock.Controller) *MockEmployeeDataSource {
	mock := &MockEmployeeDataSource{ctrl: ctrl}
	mock.recorder = &MockEmployeeDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmployeeDataSource) EXPECT() *MockEmployeeDataSourceMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockEmployeeDataSource) Add(employee entities.Employee) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", employee)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockEmployeeDataSourceMockRecorder) Add(employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEmployeeDataSource)(nil).Add), employee)
}

// GetAll mocks base method
func (m *MockEmployeeDataSource) GetAll() ([]entities.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entities.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockEmployeeDataSourceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEmployeeDataSource)(nil).GetAll))
}

// GetById mocks base method
func (m *MockEmployeeDataSource) GetById(id int) (*entities.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*entities.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockEmployeeDataSourceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockEmployeeDataSource)(nil).GetById), id)
}
